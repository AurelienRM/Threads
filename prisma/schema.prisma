datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String? @unique
  createdAt     DateTime  @default(now())
  bio           String?
  link          String?
  accounts      Account[]
  sessions      Session[]
  followers       Follow[]  @relation("follower")
  followeds       Follow[]  @relation("followed")
  posts         Post[]
  likes         Like[]
}

model Post {
  id        String @id @default(cuid())
  content   String
  parentId  String?
  createdAt DateTime @default(now())
  userId  String

  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes   Like[]
  replies Post[] @relation("comments")
  parent  Post? @relation("comments", fields: [parentId], references: [id], onDelete: Cascade)
}

model Like {
  id        String @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  id        String @id @default(cuid())
  followerId String
  followingId String
  createdAt DateTime @default(now())

  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followeds User @relation("followed",fields: [followingId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}